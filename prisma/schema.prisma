generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExpenseType {
  ONE_TIME
  RECURRING
  TRANSFER
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  BANK_TRANSFER
  DIGITAL_BANK
  SAVINGS
  OTHER
}

model User {
  id               String            @id @default(uuid())
  username         String            @unique
  displayName      String
  email            String?           @unique
  isEmailVerified  Boolean?          @default(false)
  googleEmail      String?           @unique
  passwordHash     String
  googleId         String?           @unique
  avatarUrl        String?
  session          Session[]
  categoryGroups   CategoryGroup[]
  category         Category[]
  monthlyBudget    MonthlyBudget[]
  income           MonthlyIncome[]
  settingsDefaults SettingsDefaults?
  expense          Expense[]
  tags             Tag[]

  createdAt DateTime @default(now())

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  sessionToken String?  @unique
  createdAt    DateTime @default(now())

  @@index([userId])
  @@map("sessions")
}

model SettingsDefaults {
  id                   String         @id @default(uuid())
  defaultBudget        Float
  defaultIncome        Float
  currency             String         @default("PHP")
  locale               String?        @default("en-US")
  timeZone             String?        @default("UTC")
  dateFormat           String?        @default("MM/DD/YYYY")
  defaultPaymentMethod PaymentMethod? @default(CASH)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("settings_defaults")
}

model CategoryGroup {
  id         String     @id @default(uuid())
  name       String
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories Category[]

  createdAt DateTime @default(now())

  @@unique([userId, name])
  @@map("category_groups")
}

model Category {
  id              String        @id @default(uuid())
  name            String
  icon            String?
  color           String?
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryGroupId String
  categoryGroup   CategoryGroup @relation(fields: [categoryGroupId], references: [id], onDelete: Cascade)
  expense         Expense[]

  createdAt DateTime @default(now())

  @@unique([userId, categoryGroupId, name])
  @@index([userId])
  @@map("categories")
}

model MonthlyBudget {
  id     String @id @default(uuid())
  amount Float
  month  Int
  year   Int
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, month, year])
  @@index([userId, month, year])
  @@map("monthly_budgets")
}

model MonthlyIncome {
  id     String @id @default(uuid())
  amount Float
  month  Int
  year   Int
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, month, year])
  @@index([userId, month, year])
  @@map("monthly_incomes")
}

model Expense {
  id            String        @id @default(uuid())
  description   String?
  amount        Float
  type          ExpenseType
  paymentMethod PaymentMethod
  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate     DateTime
  dueDate       DateTime?
  isPaid        Boolean
  tags          Tag[]
  expenseNote   ExpenseNote?

  createdAt DateTime @default(now())

  @@index([userId, categoryId])
  @@index([startDate])
  @@index([dueDate])
  @@map("expenses")
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[]

  createdAt DateTime @default(now())

  @@unique([name, userId])
  @@map("tags")
}

model ExpenseNote {
  id        String  @id @default(uuid())
  expenseId String  @unique
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  note      String

  createdAt DateTime @default(now())

  @@map("expense_notes")
}
